# base/synology-csi/csi.yaml
# VolumeSnapshot CRDs (nécessaire même si on n’utilise pas les snapshots)
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: volumesnapshotclasses.snapshot.storage.k8s.io
spec:
  group: snapshot.storage.k8s.io
  names:
    kind: VolumeSnapshotClass
    plural: volumesnapshotclasses
    singular: volumesnapshotclass
  scope: Cluster
  versions:
    - name: v1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          properties:
            driver:
              type: string
            deletionPolicy:
              type: string
              enum: ["Delete", "Retain"]
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: volumesnapshots.snapshot.storage.k8s.io
spec:
  group: snapshot.storage.k8s.io
  names:
    kind: VolumeSnapshot
    plural: volumesnapshots
    singular: volumesnapshot
  scope: Namespaced
  versions:
    - name: v1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              type: object
              properties:
                source:
                  type: object
                  properties:
                    persistentVolumeClaimName:
                      type: string
                volumeSnapshotClassName:
                  type: string
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: volumesnapshotcontents.snapshot.storage.k8s.io
spec:
  group: snapshot.storage.k8s.io
  names:
    kind: VolumeSnapshotContent
    plural: volumesnapshotcontents
    singular: volumesnapshotcontent
  scope: Cluster
  versions:
    - name: v1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              type: object
              properties:
                deletionPolicy:
                  type: string
                  enum: ["Delete", "Retain"]
                driver:
                  type: string
                source:
                  type: object
                volumeSnapshotRef:
                  type: object

# ConfigMap client-info (à remplacer par un SealedSecret ou ExternalSecret si tu veux)
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: client-info
  namespace: synology-csi
data:
  client-info.yml: |
    clients:
      - host: 192.168.111.69
        port: 5100
        https: true
        username: talos-cli
        password: ugRqZu6zahkFPTfjfu2nu548oNmdW4kFNXXVaU9o4ac8cVdRoQa8zvQxPFsFP7q8

# Secret réel (créé automatiquement à partir de la ConfigMap par un post-renderer ou SealedSecret)
---
apiVersion: v1
kind: Secret
metadata:
  name: client-info-secret
  namespace: synology-csi
type: Opaque
stringData:
  client-info.yml: |
    clients:
      - host: 192.168.111.69
        port: 5100
        https: true
        username: talos-cli
        password: ugRqZu6zahkFPTfjfu2nu548oNmdW4kFNXXVaU9o4ac8cVdRoQa8zvQxPFsFP7q8

# StorageClass
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: synelia-iscsi-sc
provisioner: csi.san.synology.com
parameters:
  protocol: iscsi
  dsm: 192.168.111.69
  location: /volume1
  fsType: ext4
reclaimPolicy: Retain
allowVolumeExpansion: true
volumeBindingMode: Immediate

# DaemonSet node
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: synology-csi-node
  namespace: synology-csi
spec:
  selector:
    matchLabels:
      app: synology-csi-node
  template:
    metadata:
      labels:
        app: synology-csi-node
    spec:
      serviceAccountName: csi-node-sa
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      tolerations:
        - operator: Exists
      containers:
        - name: driver-registrar
          image: registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.9.0
          args:
            - "--v=5"
            - "--csi-address=/csi/csi.sock"
            - "--kubelet-registration-path=/var/lib/kubelet/plugins/csi.san.synology.com/csi.sock"
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "rm -rf /registration/csi.san.synology.com /registration/csi.san.synology.com-reg.sock"]
          env:
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: plugin-dir
              mountPath: /csi
            - name: registration-dir
              mountPath: /registration
            - name: kubelet-dir
              mountPath: /var/lib/kubelet
              mountPropagation: Bidirectional
          securityContext:
            privileged: true
        - name: csi-plugin
          image: ghcr.io/zebernst/synology-csi:v1.2.0
          args:
            - "--nodeid=$(NODE_ID)"
            - "--endpoint=$(CSI_ENDPOINT)"
            - "--client-info=/etc/synology/client-info.yml"
            - "--log-level=5"
          env:
            - name: NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: CSI_ENDPOINT
              value: unix:///csi/csi.sock
          volumeMounts:
            - name: plugin-dir
              mountPath: /csi
            - name: kubelet-dir
              mountPath: /var/lib/kubelet
              mountPropagation: Bidirectional
            - name: device-dir
              mountPath: /dev
            - name: host-root
              mountPath: /host
            - name: client-info
              mountPath: /etc/synology
              readOnly: true
          securityContext:
            privileged: true
      volumes:
        - name: plugin-dir
          hostPath:
            path: /var/lib/kubelet/plugins/csi.san.synology.com
            type: DirectoryOrCreate
        - name: registration-dir
          hostPath:
            path: /var/lib/kubelet/plugins_registry
            type: Directory
        - name: kubelet-dir
          hostPath:
            path: /var/lib/kubelet
            type: Directory
        - name: device-dir
          hostPath:
            path: /dev
            type: Directory
        - name: host-root
          hostPath:
            path: /
            type: Directory
        - name: client-info
          secret:
            secretName: client-info-secret

# StatefulSet controller
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: synology-csi-controller
  namespace: synology-csi
spec:
  serviceName: synology-csi-controller
  replicas: 1
  selector:
    matchLabels:
      app: synology-csi-controller
  template:
    metadata:
      labels:
        app: synology-csi-controller
    spec:
      serviceAccountName: csi-controller-sa
      tolerations:
        - operator: Exists
      containers:
        - name: csi-provisioner
          image: registry.k8s.io/sig-storage/csi-provisioner:v3.5.0
          args:
            - "--provisioner=csi.san.synology.com"
            - "--csi-address=/csi/csi.sock"
            - "--v=5"
            - "--feature-gates=Topology=true"
          volumeMounts:
            - name: socket-dir
              mountPath: /csi
        - name: csi-attacher
          image: registry.k8s.io/sig-storage/csi-attacher:v4.3.0
          args:
            - "--v=5"
            - "--csi-address=/csi/csi.sock"
          volumeMounts:
            - name: socket-dir
              mountPath: /csi
        - name: csi-resizer
          image: registry.k8s.io/sig-storage/csi-resizer:v1.8.0
          args:
            - "--v=5"
            - "--csi-address=/csi/csi.sock"
          volumeMounts:
            - name: socket-dir
              mountPath: /csi
        - name: csi-plugin
          image: ghcr.io/zebernst/synology-csi:v1.2.0
          args:
            - "--nodeid=$(NODE_ID)"
            - "--endpoint=$(CSI_ENDPOINT)"
            - "--client-info=/etc/synology/client-info.yml"
            - "--log-level=5"
          env:
            - name: NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: CSI_ENDPOINT
              value: unix:///csi/csi.sock
          volumeMounts:
            - name: socket-dir
              mountPath: /csi
            - name: client-info
              mountPath: /etc/synology
              readOnly: true
          securityContext:
            privileged: true
      volumes:
        - name: socket-dir
          emptyDir: {}
        - name: client-info
          secret:
            secretName: client-info-secret

# StatefulSet snapshotter (optionnel ; supprimer si tu n’utilises pas les snapshots)
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: synology-csi-snapshotter
  namespace: synology-csi
spec:
  serviceName: synology-csi-snapshotter
  replicas: 1
  selector:
    matchLabels:
      app: synology-csi-snapshotter
  template:
    metadata:
      labels:
        app: synology-csi-snapshotter
    spec:
      serviceAccountName: csi-snapshotter-sa
      tolerations:
        - operator: Exists
      containers:
        - name: csi-snapshotter
          image: registry.k8s.io/sig-storage/csi-snapshotter:v6.3.3
          args:
            - "--v=5"
            - "--csi-address=/csi/csi.sock"
            - "--leader-election=false"
          volumeMounts:
            - name: socket-dir
              mountPath: /csi
        - name: csi-plugin
          image: ghcr.io/zebernst/synology-csi:v1.2.0
          args:
            - "--nodeid=$(NODE_ID)"
            - "--endpoint=$(CSI_ENDPOINT)"
            - "--client-info=/etc/synology/client-info.yml"
            - "--snapshotter"
            - "--log-level=5"
          env:
            - name: NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: CSI_ENDPOINT
              value: unix:///csi/csi.sock
          volumeMounts:
            - name: socket-dir
              mountPath: /csi
            - name: client-info
              mountPath: /etc/synology
              readOnly: true
          securityContext:
            privileged: true
      volumes:
        - name: socket-dir
          emptyDir: {}
        - name: client-info
          secret:
            secretName: client-info-secret
