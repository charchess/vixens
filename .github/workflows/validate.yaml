name: Validate & Security

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # 1️⃣ Validation YAML avec yamllint simple
  yaml-lint:
    name: YAML Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup yamllint
        run: |
          sudo apt-get update && sudo apt-get install -y yamllint

      - name: Validate YAML syntax
        run: |
          echo "🔍 Validation YAML syntax"
          
          # Configuration yamllint inline
          cat > yamllint-config.yml << 'EOF'
          extends: default
          
          rules:
            line-length:
              max: 120
              level: warning
            document-start:
              present: false
            trailing-spaces:
              level: error
            new-line-at-end-of-file:
              level: error
            comments:
              min-spaces-from-content: 1
          EOF
          
          # Valider les fichiers YAML
          find base clusters -name "*.yaml" -o -name "*.yml" | \
            xargs yamllint -c yamllint-config.yml || true

  # 2️⃣ Validation Kubernetes avec kubectl
  kubectl-validate:
    name: kubectl validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.30.0'

      - name: Validate manifests
        run: |
          echo "🔍 Validation des manifests Kubernetes"
          
          # Valider les dossiers pertinents
          for dir in base clusters; do
            if [ -d "$dir" ]; then
              echo "📁 Validation de $dir/"
              
              # Valider chaque fichier individuellement
              find "$dir" -name "*.yaml" -type f | while read file; do
                echo "  📄 $(basename "$file")"
                
                # Ignorer les fichiers de workflow GitHub
                if [[ "$file" == *".github"* ]]; then
                  echo "    ⚠️ Fichier GitHub ignoré"
                  continue
                fi
                
                # Validation avec kubectl
                kubectl apply --dry-run=client -f "$file" || {
                  echo "    ❌ Erreur dans $file"
                  exit 1
                }
              done
            fi
          done

  # 3️⃣ Validation structurelle rapide
  structure-check:
    name: Structure Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup yq
        run: |
          wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      - name: Validate structure
        run: |
          echo "🔍 Validation structurelle"
          
          # Vérifier les Applications ArgoCD
          find clusters -name "*.yaml" -type f | while read file; do
            if [ "$(yq eval '.kind' "$file" 2>/dev/null)" = "Application" ]; then
              echo "  ✅ ArgoCD Application: $(basename "$file")"
              
              # Vérification basique
              yq eval '
                .metadata.name and
                .spec.project and
                .spec.source.repoURL
              ' "$file" >/dev/null || {
                echo "    ❌ Structure invalide: $file"
                exit 1
              }
            fi
          done

  # 4️⃣ Rapport simple
  summary:
    name: Summary
    runs-on: ubuntu-latest
    needs: [yaml-lint, kubectl-validate, structure-check]
    if: always()
    steps:
      - name: Create summary
        run: |
          echo "## ✅ Validation Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- YAML Lint: ${{ needs.yaml-lint.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- kubectl Validation: ${{ needs.kubectl-validate.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Structure Check: ${{ needs.structure-check.result }}" >> $GITHUB_STEP_SUMMARY
