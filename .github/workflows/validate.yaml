name: Validate & Security

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # 1️⃣ Validation YAML robuste
  yaml-lint:
    name: YAML Syntax & Style
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup yamllint
        run: |
          sudo apt-get update && sudo apt-get install -y yamllint

      - name: Validate YAML syntax
        run: |
          echo "🔍 Validation YAML syntax"
          
          # Configuration yamllint inline
          cat > yamllint-config.yml << 'EOF'
          extends: default
          
          rules:
            line-length:
              max: 120
              level: warning
            document-start:
              present: false
            trailing-spaces:
              level: error
            new-line-at-end-of-file:
              level: error
            comments:
              min-spaces-from-content: 1
            brackets:
              level: warning
            empty-lines:
              max: 2
          EOF
          
          # Valider tous les fichiers YAML pertinents
          find base clusters -name "*.yaml" -o -name "*.yml" | \
            xargs yamllint -c yamllint-config.yml

  # 2️⃣ Validation structurelle Kubernetes
  kube-structure:
    name: Kubernetes Structure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubeval (sans kubectl)
        run: |
          # Installation de kubeval avec schémas complets
          wget https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
          tar xf kubeval-linux-amd64.tar.gz
          sudo cp kubeval /usr/local/bin/

      - name: Validate with kubeval (CRDs ignorées)
        run: |
          echo "🔍 Validation structure Kubernetes"
          
          # Valider uniquement les ressources standards
          kubeval \
            --ignore-missing-schemas \
            --kubernetes-version 1.30.0 \
            --strict \
            --skip-kinds Application,AppProject,CustomResourceDefinition \
            base/ clusters/

  # 3️⃣ Validation spécifique ArgoCD
  argocd-validate:
    name: ArgoCD Structure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup yq
        uses: mikefarah/yq@v4.44.1

      - name: Validate ArgoCD applications
        run: |
          echo "🔍 Validation Applications ArgoCD"
          
          # Validation complète des Applications
          find clusters -name "*.yaml" -type f | while read file; do
            if [ "$(yq eval '.kind' "$file" 2>/dev/null)" = "Application" ]; then
              echo "📋 Validation: $(basename "$file")"
              
              # Vérification détaillée
              yq eval '
                .apiVersion == "argoproj.io/v1alpha1" and
                .kind == "Application" and
                .metadata.name != null and
                .metadata.name != "" and
                .spec.project != null and
                .spec.project != "" and
                .spec.source.repoURL != null and
                .spec.source.repoURL != "" and
                .spec.source.path != null and
                .spec.source.path != "" and
                .spec.destination.server != null and
                .spec.destination.server != "" and
                .spec.destination.namespace != null and
                .spec.destination.namespace != ""
              ' "$file" || {
                echo "❌ Structure ArgoCD invalide: $file"
                yq eval '.' "$file"  # Afficher le contenu pour debugging
                exit 1
              }
            fi
          done

  # 4️⃣ Validation de sécurité
  security-scan:
    name: Security Best Practices
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Security checks
        run: |
          echo "🔍 Vérification sécurité"
          
          # Installation de checkov
          pip3 install checkov
          
          # Scan des bonnes pratiques
          checkov --directory . --framework kubernetes --compact --quiet || true

      - name: Check security patterns
        run: |
          echo "🔍 Recherche de patterns de sécurité"
          
          # Vérification des patterns dangereux
          find base clusters -name "*.yaml" -type f | while read file; do
            echo "  📄 $(basename "$file")"
            
            # Recherche de patterns problématiques
            if grep -q "privileged: true" "$file"; then
              echo "    ⚠️ Privilèges élevés détectés"
            fi
            
            if grep -q "runAsUser: 0\|runAsRoot: true" "$file"; then
              echo "    ⚠️ Exécution en root détectée"
            fi
            
            if grep -q "allowPrivilegeEscalation: true" "$file"; then
              echo "    ⚠️ Élévation de privilèges autorisée"
            fi
          done

  # 5️⃣ Résumé final
  validation-summary:
    name: Validation Summary
    runs-on: ubuntu-latest
    needs: [yaml-lint, kube-structure, argocd-validate, security-scan]
    if: always()
    steps:
      - name: Create summary
        run: |
          echo "## ✅ Validation Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| YAML Lint | ${{ needs.yaml-lint.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| K8s Structure | ${{ needs.kube-structure.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| ArgoCD Apps | ${{ needs.argocd-validate.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Check | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY

