name: Validate & Security

on:
  push:
    branches: [ main ]
    paths:
      - '**.yaml'
      - '**.yml'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      - '**.yaml'
      - '**.yml'

env:
  KUBECTL_VERSION: '1.30.0'

jobs:
  # 1Ô∏è‚É£ Validation YAML am√©lior√©e
  yaml-lint:
    name: YAML Syntax & Style
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: YAML Lint
        uses: karancode/yamllint-github-action@master
        with:
          yamllint_strict: false
          yamllint_comment: true
          yamllint_config_filepath: .yamllint.yml

  # 2Ô∏è‚É£ Validation Kubernetes avec kubeconform
  kube-validate:
    name: Kubernetes Validation
    runs-on: ubuntu-latest
    strategy:
      matrix:
        k8s-version: ['1.29.0', '1.30.0', '1.31.0']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubeconform
        run: |
          curl -L https://github.com/yannh/kubeconform/releases/latest/download/kubeconform-linux-amd64.tar.gz | tar xz
          sudo mv kubeconform /usr/local/bin/

      - name: Validate manifests with kubeconform
        run: |
          echo "üîç Validation avec Kubernetes ${{ matrix.k8s-version }}"
          
          # Validation des manifests Kubernetes standards
          kubeconform \
            -kubernetes-version ${{ matrix.k8s-version }} \
            -strict \
            -ignore-missing-schemas \
            -schema-location default \
            -schema-location 'https://raw.githubusercontent.com/datreeio/CRDs-catalog/main/{{.Group}}/{{.ResourceKind}}_{{.ResourceAPIVersion}}.json' \
            base/ clusters/

      - name: Validate specific CRDs
        run: |
          echo "üîç Validation des CRDs sp√©cifiques"
          
          # Validation s√©par√©e pour chaque type de manifest
          find base -name "*.yaml" -type f | while read file; do
            echo "üìÑ Validation de $file"
            if grep -q "kind: Application" "$file" || grep -q "kind: AppProject" "$file"; then
              echo "‚ö†Ô∏è CRD ArgoCD ignor√©: $file"
            elif grep -q "kind: CustomResourceDefinition" "$file"; then
              echo "‚ö†Ô∏è CRD ignor√©: $file"
            else
              kubeconform -kubernetes-version ${{ matrix.k8s-version }} -strict "$file" || exit 1
            fi
          done

  # 3Ô∏è‚É£ Validation avec kubectl (m√©thode alternative)
  kubectl-validate:
    name: kubectl dry-run validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.30.0'

      - name: Validate manifests
        run: |
          echo "üîç Validation avec kubectl dry-run"
          
          # Validation par dossier avec filtrage intelligent
          for dir in base clusters/vixens/argocd/apps; do
            if [ -d "$dir" ]; then
              echo "üìÅ Validation de $dir/"
              
              # Valider uniquement les manifests standards
              find "$dir" -name "*.yaml" -type f | while read file; do
                if [[ "$file" != *"argocd"* ]] && [[ "$file" != *"longhorn"* ]]; then
                  echo "  üìÑ $file"
                  kubectl apply --dry-run=client -f "$file" || exit 1
                fi
              done
            fi
          done

  # 4Ô∏è‚É£ Validation s√©lective par type
  selective-validate:
    name: Selective Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup validation tools
        run: |
          sudo apt-get update && sudo apt-get install -y yq

      - name: Validate by resource type
        run: |
          echo "üîç Validation s√©lective par type de ressource"
          
          # Dossiers √† valider
          DIRS=("base" "clusters")
          
          for dir in "${DIRS[@]}"; do
            if [ -d "$dir" ]; then
              echo "üìÅ Analyse de $dir/"
              
              # Valider uniquement les ressources standards
              find "$dir" -name "*.yaml" -type f | while read file; do
                kind=$(yq eval '.kind' "$file")
                
                case "$kind" in
                  "Namespace"|"Deployment"|"Service"|"ConfigMap"|"Secret"|"Ingress"|"NetworkPolicy")
                    echo "  ‚úÖ Validation de $kind: $file"
                    kubectl apply --dry-run=client -f "$file" || exit 1
                    ;;
                  "Application"|"AppProject"|"CustomResourceDefinition")
                    echo "  ‚ö†Ô∏è CRD ignor√©: $kind dans $file"
                    ;;
                  *)
                    echo "  ‚ùì Type inconnu: $kind dans $file"
                    ;;
                esac
              done
            fi
          done
