name: Validate & Security

on:
  push:
    branches: [ main ]
    paths:
      - '**.yaml'
      - '**.yml'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      - '**.yaml'
      - '**.yml'

jobs:
  # 1️⃣ Validation YAML et style
  yaml-lint:
    name: YAML Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: YAML Lint
        uses: karancode/yamllint-github-action@master
        with:
          yamllint_strict: false
          yamllint_comment: true
          yamllint_config_filepath: .yamllint.yml

  # 2️⃣ Validation avec kubectl (alternative à kubeval)
  kubectl-validate:
    name: kubectl validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.30.0'

      - name: Validate manifests
        run: |
          echo "🔍 Validation des manifests Kubernetes"
          
          # Valider uniquement les dossiers pertinents
          for dir in base clusters; do
            if [ -d "$dir" ]; then
              echo "📁 Validation de $dir/"
              
              # Filtrer les fichiers pertinents
              find "$dir" -name "*.yaml" -type f | grep -v ".github" | while read file; do
                echo "  📄 $(basename $file)"
                
                # Validation silencieuse
                kubectl apply --dry-run=client -f "$file" 2>/dev/null || {
                  echo "    ❌ Erreur: $file"
                  kubectl apply --dry-run=client -f "$file"
                  exit 1
                }
              done
            fi
          done

  # 3️⃣ Validation spécifique des CRDs ArgoCD
  argocd-validate:
    name: ArgoCD Apps Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup yq
        uses: mikefarah/yq@v4.44.1

      - name: Validate ArgoCD structure
        run: |
          echo "🔍 Validation des Applications ArgoCD"
          
          find clusters -name "*.yaml" -type f | while read file; do
            if yq eval '.kind == "Application"' "$file" 2>/dev/null | grep -q true; then
              echo "  📋 $(basename $file)"
              
              # Vérification rapide de la structure
              yq eval '
                .metadata.name != null and
                .spec.project != null and
                .spec.source.repoURL != null and
                .spec.destination.server != null
              ' "$file" || {
                echo "    ❌ Structure ArgoCD invalide: $file"
                exit 1
              }
            fi
          done

  # 4️⃣ Rapport de validation
  report:
    name: Validation Report
    runs-on: ubuntu-latest
    needs: [yaml-lint, kubectl-validate, argocd-validate]
    if: always()
    steps:
      - name: Create summary
        run: |
          echo "## ✅ Validation Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| YAML Lint | ${{ needs.yaml-lint.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| kubectl Validation | ${{ needs.kubectl-validate.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| ArgoCD Structure | ${{ needs.argocd-validate.result }} |" >> $GITHUB_STEP_SUMMARY
