name: Validate & Security

on:
  push:
    branches: [ main ]
    paths:
      - '**.yaml'
      - '**.yml'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      - '**.yaml'
      - '**.yml'

jobs:
  # 1️⃣ Validation YAML basique (fonctionne toujours)
  yaml-lint:
    name: YAML Syntax & Style
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: YAML Lint
        uses: karancode/yamllint-github-action@master
        with:
          yamllint_strict: false
          yamllint_comment: true
          yamllint_config_filepath: .yamllint.yml

  # 2️⃣ Validation avec kubectl uniquement (remplace kubeval)
  kubectl-validate:
    name: kubectl dry-run validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.30.0'

      - name: Validate manifests by category
        run: |
          echo "🔍 Validation des manifests Kubernetes"
          
          # Validation des manifests standards (sans CRDs)
          for category in namespace service deployment ingress; do
            files=$(find base -name "*${category}*.yaml" -type f 2>/dev/null)
            if [ -n "$files" ]; then
              echo "📁 Validation des $category manifests:"
              echo "$files" | while read file; do
                echo "  📄 $file"
                kubectl apply --dry-run=client -f "$file" || {
                  echo "❌ Erreur dans $file"
                  exit 1
                }
              done
            fi
          done

      - name: Validate ArgoCD applications
        run: |
          echo "🔍 Validation des Applications ArgoCD"
          
          # Valider la structure des Applications ArgoCD
          find clusters -name "*.yaml" -type f | while read file; do
            if grep -q "kind: Application" "$file"; then
              echo "📋 Validation de $file"
              
              # Vérifier la structure minimale avec yq
              yq eval '
                .apiVersion == "argoproj.io/v1alpha1" and
                .kind == "Application" and
                .metadata.name and
                .spec.project and
                .spec.source.repoURL and
                .spec.source.path and
                .spec.destination.server and
                .spec.destination.namespace
              ' "$file" || {
                echo "❌ Structure ArgoCD invalide: $file"
                exit 1
              }
            fi
          done

  # 3️⃣ Validation structurelle avancée
  structure-validate:
    name: Structure & Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup tools
        run: |
          sudo apt-get update && sudo apt-get install -y yq

      - name: Validate resource structure
        run: |
          echo "🔍 Validation structurelle"
          
          # Vérification des namespaces référencés
          echo "📋 Vérification des namespaces"
          find base -name "*.yaml" -type f | while read file; do
            namespace=$(yq eval '.metadata.namespace' "$file")
            if [ "$namespace" != "null" ] && [ "$namespace" != "" ]; then
              namespace_file="base/${namespace}/namespace.yaml"
              if [ ! -f "$namespace_file" ]; then
                echo "⚠️ Namespace $namespace référencé mais pas défini dans $file"
              fi
            fi
          done

      - name: Validate ingress targets
        run: |
          echo "🔍 Validation des ingress"
          
          # Vérifier que les services référencés dans les ingress existent
          find base -name "*ingress*.yaml" -type f | while read ingress; do
            service=$(yq eval '.spec.rules[0].http.paths[0].backend.service.name' "$ingress")
            namespace=$(yq eval '.metadata.namespace' "$ingress")
            echo "  📡 Ingress: $(basename $ingress) -> Service: $service"
            
            # Vérifier l'existence du service (approximatif)
            if [ "$service" != "null" ]; then
              service_file="base/*/${service}.yaml"
              if ! find base -name "${service}.yaml" -type f | grep -q .; then
                echo "⚠️ Service $service référencé mais peut ne pas exister"
              fi
            fi
          done

  # 4️⃣ Validation de sécurité simplifiée
  security-check:
    name: Security Best Practices
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check security best practices
        run: |
          echo "🔍 Vérification des bonnes pratiques de sécurité"
          
          # Vérifier les privilèges élevés
          find base -name "*.yaml" -type f | while read file; do
            if grep -q "privileged: true" "$file"; then
              echo "⚠️ Privilèges élevés détectés: $file"
            fi
            
            if grep -q "runAsRoot\|runAsUser: 0" "$file"; then
              echo "⚠️ Exécution en root détectée: $file"
            fi
          done

  # 5️⃣ Génération de rapport
  report:
    name: Generate Summary
    runs-on: ubuntu-latest
    needs: [yaml-lint, kubectl-validate, structure-validate, security-check]
    if: always()
    steps:
      - name: Create summary
        run: |
          echo "# ✅ Validation Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Results" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| YAML Lint | ${{ needs.yaml-lint.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| kubectl Validation | ${{ needs.kubectl-validate.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Structure | ${{ needs.structure-validate.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security-check.result }} |" >> $GITHUB_STEP_SUMMARY
