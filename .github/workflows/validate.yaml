name: Validate & Security

on:
  push:
    branches: [ main ]
    paths:
      - '**.yaml'
      - '**.yml'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      - '**.yaml'
      - '**.yml'

env:
  KUBECTL_VERSION: '1.30.0'

jobs:
  # 1️⃣ Validation YAML basique
  yaml-lint:
    name: YAML Syntax & Style
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: YAML Lint
        uses: karancode/yamllint-github-action@master
        with:
          yamllint_strict: false
          yamllint_comment: true
          yamllint_config_filepath: .yamllint.yml

  # 2️⃣ Validation Kubernetes
  kube-validate:
    name: Kubernetes Validation
    runs-on: ubuntu-latest
    strategy:
      matrix:
        k8s-version: ['1.29.0', '1.30.0', '1.31.0']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl ${{ matrix.k8s-version }}
        uses: azure/setup-kubectl@v3
        with:
          version: 'v${{ matrix.k8s-version }}'

      - name: Validate manifests
        run: |
          # Validation avec plusieurs versions de Kubernetes
          echo "🔍 Validation avec Kubernetes ${{ matrix.k8s-version }}"
          
          # Validation des manifests par namespace
          for dir in base clusters/vixens/argocd/apps; do
            if [ -d "$dir" ]; then
              echo "📁 Validation de $dir/"
              kubectl apply --dry-run=client -f "$dir" --validate=true || exit 1
            fi
          done

  # 3️⃣ Sécurité & Best Practices
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: kubernetes
          output_format: cli
          soft_fail: false
          download_external_modules: true

      - name: Run Kubesec
        uses: controlplaneio/kubesec-action@v2
        with:
          input: base/
          format: json

  # 4️⃣ Validation de structure GitOps
  gitops-validate:
    name: GitOps Structure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate ArgoCD Apps
        run: |
          echo "🔍 Validation des Applications ArgoCD"
          
          # Vérifier que toutes les apps ont les champs requis
          find clusters -name "*.yaml" -exec grep -l "kind: Application" {} \; | while read file; do
            echo "📋 Validation de $file"
            
            # Vérifier les champs obligatoires
            yq eval '
              .spec.project and 
              .spec.source.repoURL and 
              .spec.source.path and 
              .spec.destination.server and 
              .spec.destination.namespace
            ' "$file" || {
              echo "❌ Application invalide: $file"
              exit 1
            }
          done

      - name: Check for missing resources
        run: |
          echo "🔍 Vérification des ressources manquantes"
          
          # Vérifier que les dossiers référencés existent
          find clusters -name "*.yaml" -exec yq eval '.spec.source.path' {} \; | while read path; do
            if [ -n "$path" ] && [ ! -d "$path" ]; then
              echo "❌ Dossier manquant: $path"
              exit 1
            fi
          done

  # 5️⃣ Génération de rapport
  generate-report:
    name: Generate Report
    runs-on: ubuntu-latest
    needs: [yaml-lint, kube-validate, security-scan, gitops-validate]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate summary
        run: |
          echo "# 🚀 Validation Report" > validation-report.md
          echo "## 📊 Summary" >> validation-report.md
          echo "- YAML Lint: ${{ needs.yaml-lint.result }}" >> validation-report.md
          echo "- K8s Validation: ${{ needs.kube-validate.result }}" >> validation-report.md
          echo "- Security Scan: ${{ needs.security-scan.result }}" >> validation-report.md
          echo "- GitOps Structure: ${{ needs.gitops-validate.result }}" >> validation-report.md

      - name: Upload report
        uses: actions/upload-artifact@v4
        with:
          name: validation-report
          path: validation-report.md
